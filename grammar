# Lines starting with # are comments
# This grammar is copied from another grammar I found online
# but currently I don't have its source, but I will include it anyway

# Items inside double quotes are type literally when writing regular expression
# ITEM? : ITEM is optional
# ITEM* : ITEM occurs zero or more times
# ITEM+ : ITEM occurs one or more times

# An arbitrary `RegULAR expRESSION` (hence the name `Regexp`)
Regexp => Concatenation ( "|" Concatenation )*
# An arbitrary regular expression is either:
# - Concatenation of other regular expressions, like: `a(a|b)(c*z).a` or just `.` or `x`
# - Alternation of other regular expressions, like: a|(bc)|ccc
# THUS, Alternation has lower precedence than concatenation

# An expression of the form: E1E2...E_n
# placing expressions adjacent to one another with no separators
# something like `...(a+)(b(x|y))a.b.c.`
Concatenation => Primary+

Primary => Empty | QuantifiedExpression

# Yes, it's nothing, not even \0
# because \0 is an actual character
Empty => ""

QuantifiedExpression => ( Match | Group ) Quantifier?

Quantifier => ZeroOrOne | ZeroOrMore | OneOrMore

ZeroOrOne => "?"

ZeroOrMore => "*"

OneOrMore => "+"

# An expression of the form: (E)
# E is an arbitrary expression
# something like (abc*)
Group => "(" Regexp ")"

Match => MatchCharacter | MatchAnyCharacter

MatchCharacter => Character

# `Character` is defined to be a `Character token` according to Rust lexical analysis
# read Rust reference for more details
Character => OrdinaryCharacter | EscapedMetacharacter

# Any character that is not a metacharacter
OrdinaryCharacter => [^\(\)\\\|\*\.\?]
# Note that each character inside the above regular expression (used in this grammar)
# is preceded by a slash to strip it from its special meaning

EscapedMetacharacter => "\" Metacharacter

Metacharacter => LeftParen | RightParen | Slash | Pipe | Star | Dot | Mark

LeftParen => "("

RightParen => ")"

Slash => "\"
# A LITTLE SIDE NOTE:
# In regular expressions, slash \ is metacharacter
# It is a unary operator preceding its operand, it's incorrect to use a slash at the end
# of a regular expression
# Given a metacharacter, it produces an expression matching the metacharacter following it
# so the expression '\|' matches | itself, also '\\' matches a literal slash
# Given a non-metacharacter, it does nothing
# the expression '\c' matches two characters, a slash followed by a lowercase C
# BUT, the scanner do its processing depending on how matches slashes it
# receive from the compiler
# Thus to write an expression matching a single slash you need to write:
# '\\\\'
# r'\\' (raw string)
# 
# '\\\\' the first 2 are merged by the compiler to represent one slash
# character, so does the last 2
# Hence the scanner receives two slash, the first being the operator
# the second begin the operand and this way you get `an escaped slash`
# expression matching a single literal slash

Pipe => "|"

Star => "*"

Dot => "."

Mark => "?"

# Dot expression `.` matches any single character
MatchAnyCharacter => Dot
