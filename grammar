# Lines starting with # are comments
# Names with no rules are tokens generated by the scanner
# This grammar is copied from another grammar I found online
# but currently I don't have its source, but I will include it anyway

# An arbitrary RegULAR expRESSION (hence the name `Regexp`)
Regexp => EmptyString | Alternation
# `EmptyString` is a token generated by the scanner

# An expression of the form: (E_1|...|E_n)
# E_1, ..., E_n are contentation expressions
# something like (a+|b*|(abc))
Alternation => Concatenation ( "|" Alternation )

# An expression of the form: E1E2...E_n
# placing expressions adjacent to one another with no separators
# something like `...(a+)(b(c|c))abc`
Concatenation => Primary+ Quantifier?

Quantifier => ZeroOrOne | ZeroOrMore | OneOrMore

ZeroOrOne => "?"

ZeroOrMore => "*"

OneOrMore => "+"

Primary => Match | Group

# An expression of the form: (E)
# E is an arbitray expression
Group => "(" Regexp ")"

Match => MatchCharacter | MatchAnyCharacter

# Token (Character) represents an arbitrary non-metacharacter
# to match a literal metacharacter escape it with slash \
# to match a literal | use \|
MatchCharacter => Character
# `Character` is a token generated by the scanner

# Dot expression `.` matches any single character
MatchAnyCharacter => "."
