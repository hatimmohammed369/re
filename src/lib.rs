// Scanner module
// Take the source pattern string and generate tokens as needed
pub mod scanner;

// Parser module
// Take the tokens stream generated by the scanner
// and transform it into a syntax tree
pub mod parser;

// Format error as follow:
// First line prints error type, its position and the specific error name
// Second line prints source string (string given to parser to process)
// Third line places carets `^` below items in source string which caused the erro
// Fourth line adds any helpful hints
//
// For instance:
// Syntax error at end of input: Expected expression after (
// (
//  ^
//
// Also:
// Syntax error: Un-balanced (
// (abc
// ^
// For each un-balanced (, add a matching )
pub fn format_error(
    error_msg: &str, // Main message
    source: &str,    // input source string
    // list of (j, count) items, place `count` markers (a caret `^`) starting
    // from index `j` below `source`
    positions_and_markers_count: &[(usize, u8)],
    // Any helpful hints
    hints: &str,
) -> String {
    // Allocate enough space to make less allocations during process
    let mut formatted_error = String::with_capacity(
        // the `+ 1` part is for \n
        (error_msg.len() + 1)
            + (source.len() + 1)
            + (1_usize
                + positions_and_markers_count
                    .iter()
                    .map(|(_, count)| *count as usize)
                    .sum::<usize>())
            + (hints.len() + 1),
    );

    formatted_error.push_str(error_msg);
    formatted_error.push('\n');

    formatted_error.push_str(source);
    formatted_error.push('\n');

    for (pos, count) in positions_and_markers_count {
        for _ in 1..=*pos {
            // Add spaces to align ^ with error position in source string
            formatted_error.push(' ');
        }
        for _ in 1..=*count {
            // Add as many carets as needed to pinpoint item causing error
            formatted_error.push('^');
        }
    }

    if !hints.is_empty() {
        // If there are no hints, do not add another newline character
        // so printed error is nice looking
        formatted_error.push('\n');
        formatted_error.push_str(hints);
    }

    formatted_error
}
